# Define la versi√≥n segura m√≠nima
$SafeVersion = [version]"3.0.16"
$TempDir = "$env:TEMP\OpenSSL_Update"
$DownloadUrl = "https://slproweb.com/download/Win64OpenSSL-3_5_1.exe"  # Fuente oficial segura

# Funci√≥n para obtener la versi√≥n de un binario DLL
function Get-OpenSSLVersion {
    param($Path)
    try {
        $fileVersion = (Get-Item $Path).VersionInfo.FileVersion
        return [version]$fileVersion
    } catch {
        Write-Warning "No se pudo obtener versi√≥n de: $Path"
        return $null
    }
}

# Buscar archivos de OpenSSL en disco
Write-Host "üîç Buscando archivos de OpenSSL en el sistema..."
$sslFiles = Get-ChildItem -Recurse -Path "C:\Program Files", "C:\Program Files (x86)", "C:\Windows", "$env:ProgramFiles", "$env:ProgramW6432" -Include libssl-*.dll, libcrypto-*.dll -ErrorAction SilentlyContinue

if (-not $sslFiles) {
    Write-Host "‚úÖ No se detectaron archivos OpenSSL."
    return
}

foreach ($file in $sslFiles) {
    $ver = Get-OpenSSLVersion -Path $file.FullName
    if ($ver -and $ver -lt $SafeVersion) {
        Write-Warning "‚ö†Ô∏è Versi√≥n vulnerable detectada en $($file.FullName): $ver"
        $vulnerable = $true
    } elseif ($ver) {
        Write-Host "‚úîÔ∏è Versi√≥n segura detectada en $($file.FullName): $ver"
    }
}

if ($vulnerable) {
    $choice = Read-Host "¬øDeseas descargar e instalar OpenSSL seguro (3.0.16)? (s/n)"
    if ($choice -eq "s") {
        if (-not (Test-Path $TempDir)) { New-Item -ItemType Directory -Path $TempDir | Out-Null }
        $InstallerPath = "$TempDir\Win64OpenSSL-3_0_16.exe"

        Write-Host "‚¨áÔ∏è Descargando instalador desde $DownloadUrl..."
        Invoke-WebRequest -Uri $DownloadUrl -OutFile $InstallerPath

        Write-Host "üõ†Ô∏è Ejecutando instalador (modo silencioso)..."
        Start-Process -FilePath $InstallerPath -ArgumentList "/silent" -Wait

        Write-Host "‚úÖ OpenSSL actualizado correctamente."
    }
} else {
    Write-Host "‚úÖ No se detectaron versiones vulnerables de OpenSSL."
}

# ================================
# Script: Cleanup Old .NET SDKs
# ================================

# Define la versión más reciente que deseas mantener
$latestVersion = "8.0.7"  # Cambia según la versión que quieras mantener

Write-Host "Detectando todas las versiones de .NET SDK instaladas..."

# Obtener todas las versiones instaladas desde el registro
$uninstallPaths = @(
    "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall",
    "HKLM:\SOFTWARE\WOW6432Node\Microsoft\Windows\CurrentVersion\Uninstall"
)

$installedSDKs = @()

foreach ($path in $uninstallPaths) {
    $keys = Get-ChildItem $path -ErrorAction SilentlyContinue
    foreach ($key in $keys) {
        $props = Get-ItemProperty $key.PSPath -ErrorAction SilentlyContinue
        if ($props.DisplayName -match "Microsoft .NET SDK" -and $props.DisplayVersion) {
            $installedSDKs += [PSCustomObject]@{
                Name = $props.DisplayName
                Version = $props.DisplayVersion
                UninstallString = $props.UninstallString
            }
        }
    }
}

if ($installedSDKs.Count -eq 0) {
    Write-Host "No se encontraron SDKs de .NET instalados."
    return
}

Write-Host "SDKs encontrados:"
$installedSDKs | ForEach-Object { Write-Host "$($_.Name) - $($_.Version)" }

# Filtrar y desinstalar versiones anteriores a la más reciente
foreach ($sdk in $installedSDKs) {
    try {
        if ([version]$sdk.Version -lt [version]$latestVersion) {
            Write-Host "Desinstalando $($sdk.Name) versión $($sdk.Version)..."
            if ($sdk.UninstallString) {
                Start-Process -FilePath "cmd.exe" -ArgumentList "/c $($sdk.UninstallString) /quiet /norestart" -Wait
                Write-Host "Desinstalación completada: $($sdk.Name)"
            } else {
                Write-Warning "No se encontró cadena de desinstalación para $($sdk.Name)"
            }
        }
    } catch {
        Write-Warning "Error procesando $($sdk.Name): $_"
    }
}

Write-Host "Proceso de limpieza de SDKs de .NET completado."

Write-Host "`nüîç Detectando todas las versiones de .NET instaladas..." -ForegroundColor Cyan

function Get-DotNetCliVersions {
    $dotnetPath = "${env:ProgramFiles}\dotnet\dotnet.exe"
    if (-not (Test-Path $dotnetPath)) {
        Write-Warning "‚ùå No se encontr√≥ 'dotnet.exe'."
        return
    }

    Write-Host "`nüì¶ SDKs instalados (via CLI):"
    & $dotnetPath --list-sdks | ForEach-Object { "   - $_" }

    Write-Host "`n‚öôÔ∏è Runtimes instalados (via CLI):"
    & $dotnetPath --list-runtimes | ForEach-Object { "   - $_" }
}

function Get-DotNetFrameworkVersions {
    $frameworkKey = "HKLM:\SOFTWARE\Microsoft\NET Framework Setup\NDP"
    Write-Host "`nüóÇ .NET Framework instalado (v√≠a Registro):"

    Get-ChildItem -Path $frameworkKey -Recurse |
    Where-Object { $_.GetValue("Version") -ne $null } |
    ForEach-Object {
        $ver = $_.GetValue("Version")
        $sp = $_.GetValue("SP")
        $install = $_.GetValue("Install")
        if ($install -eq 1 -or $install -eq $null) {
            Write-Host "   - $($_.PSChildName): $ver (SP: $sp)"
        }
    }
}

function Get-DotNetFolders {
    $paths = @(
        "$env:ProgramFiles\dotnet\sdk",
        "$env:ProgramFiles\dotnet\shared\Microsoft.NETCore.App",
        "$env:ProgramFiles\dotnet\shared\Microsoft.AspNetCore.App",
        "$env:ProgramFiles\dotnet\shared\Microsoft.WindowsDesktop.App"
    )

    foreach ($path in $paths) {
        if (Test-Path $path) {
            $folderName = Split-Path $path -Leaf
            Write-Host "`nüìÅ Detectado en carpeta: $folderName"
            Get-ChildItem -Directory $path | ForEach-Object {
                Write-Host "   - $($_.Name)"
            }
        }
    }
}

# ================= EJECUCI√ìN ==================
Get-DotNetCliVersions
Get-DotNetFrameworkVersions
Get-DotNetFolders

Write-Host "`n‚úÖ Detecci√≥n finalizada." -ForegroundColor Green

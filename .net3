# Update-DotNet-Full.ps1
# Detecta, corrige vulnerabilidades y actualiza a .NET 9 si es posible
# CVEs: CVE-2024-30045, CVE-2024-38229, CVE-2025-21172, CVE-2024-35264
# Fuente oficial: https://dotnet.microsoft.com
# --- Requisito: Ejecutar como Administrador ---
$isAdmin = ([Security.Principal.WindowsPrincipal] [Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator)
if (-not $isAdmin) {
    Write-Host "‚ö†Ô∏è  Este script requiere ejecuci√≥n como Administrador." -ForegroundColor Red
    Write-Host "Abre PowerShell como Administrador e int√©ntalo de nuevo."
    Start-Sleep -Seconds 5
    exit 1
}

# --- Funci√≥n: Obtener versiones instaladas ---
function Get-InstalledDotNetVersions {
    $paths = @(
        "C:\Program Files\dotnet\shared\Microsoft.NETCore.App"
        "C:\Program Files\dotnet\shared\Microsoft.WindowsDesktop.App"
        "C:\Program Files\dotnet\shared\Microsoft.AspNetCore.App"
    )
    $versions = @()
    foreach ($path in $paths) {
        if (Test-Path -Path $path -ErrorAction SilentlyContinue) {
            $items = Get-ChildItem -Path $path -ErrorAction SilentlyContinue
            if ($items) {
                foreach ($item in $items) {
                    # Ensure $item is a directory and has a Name
                    if ($item.PSIsContainer -and $item.Name -match '^\d+(\.\d+)*$') {
                        try {
                            $versionObj = [version]$item.Name
                            $versions += [PSCustomObject]@{
                                Product       = Split-Path $path -Leaf
                                Version       = $versionObj
                                VersionString = $item.Name
                                Path          = $item.FullName
                            }
                        } catch {
                            Write-Warning "Versi√≥n inv√°lida ignorada: $($item.Name)"
                        }
                    } else {
                        Write-Verbose "Ignorando entrada no v√°lida: $($item.Name)"
                    }
                }
            }
        } else {
            Write-Verbose "Ruta no encontrada: $path"
        }
    }
    return $versions | Sort-Object Product, Version -Unique
}

# --- Funci√≥n: Generar URL de descarga oficial ---
function Get-DotNetDownloadUrl {
    param([version]$Version)
    $arch = "x64"
    $majorMinor = "$($Version.Major).$($Version.Minor)"
    switch ($majorMinor) {
        "6.0" { return "https://download.visualstudio.microsoft.com/download/pr/9e9b5a3e-6d6e-4e48-9f7f-43c0f7a1c788/7e1b4953b7cd7767b7b8e4ee6da1e4c6/dotnet-runtime-6.0.$($Version.Build)-win-$arch.exe" }
        "7.0" { return "https://download.visualstudio.microsoft.com/download/pr/f3ab9fbc-f38a-4d03-8e4f-7c803e1bfc7a/c7c10189e7f5d6d0c635d5c4e4cfd1e8/dotnet-runtime-7.0.$($Version.Build)-win-$arch.exe" }
        "8.0" { return "https://download.visualstudio.microsoft.com/download/pr/8d1f97f3-50e8-4e95-952c-bbe5e63a8c35/9db1b2b7e6b7f6b3c8e1e8a8c8b7d1c6/dotnet-runtime-8.0.$($Version.Build)-win-$arch.exe" }
        default { return $null }
    }
}

# --- Funci√≥n: Comparar versiones ---
function Test-VersionInRange {
    param([version]$Version, [version]$Min, [version]$Max)
    return ($Version -ge $Min) -and ($Version -lt $Max)
}

# --- Definici√≥n de CVEs ---
$cves = @(
    @{
        Id = "CVE-2024-30045"
        Ranges = @(
            @{ Product = "Microsoft.NETCore.App"; Min = "6.0.0"; Max = "6.0.29"; Patch = "6.0.29" },
            @{ Product = "Microsoft.NETCore.App"; Min = "7.0.0"; Max = "7.0.18"; Patch = "7.0.18" },
            @{ Product = "Microsoft.NETCore.App"; Min = "8.0.0"; Max = "8.0.4";  Patch = "8.0.4"  }
        )
    },
    @{
        Id = "CVE-2024-38229"
        Ranges = @(
            @{ Product = "Microsoft.NETCore.App"; Min = "6.0.0"; Max = "6.0.30"; Patch = "6.0.30" },
            @{ Product = "Microsoft.NETCore.App"; Min = "8.0.0"; Max = "8.0.5";  Patch = "8.0.5"  }
        )
    },
    @{
        Id = "CVE-2025-21172"
        Ranges = @(
            @{ Product = "Microsoft.NETCore.App"; Min = "6.0.0"; Max = "6.0.31"; Patch = "6.0.31" },
            @{ Product = "Microsoft.NETCore.App"; Min = "8.0.0"; Max = "8.0.6";  Patch = "8.0.6"  }
        )
    },
    @{
        Id = "CVE-2024-35264"
        Ranges = @(
            @{ Product = "Microsoft.NETCore.App"; Min = "6.0.0"; Max = "6.0.28"; Patch = "6.0.28" },
            @{ Product = "Microsoft.NETCore.App"; Min = "7.0.0"; Max = "7.0.17"; Patch = "7.0.17" },
            @{ Product = "Microsoft.NETCore.App"; Min = "8.0.0"; Max = "8.0.3";  Patch = "8.0.3"  }
        )
    }
)

# --- Ejecuci√≥n principal ---
Write-Host "`nüîç Escaneando versiones de .NET instaladas..." -ForegroundColor Cyan
$installed = Get-InstalledDotNetVersions

if ($installed.Count -eq 0) {
    Write-Host "‚ùå No se encontraron instalaciones de .NET." -ForegroundColor Red
    exit 1
}

$installed | Format-Table Product, VersionString -AutoSize

# Filtrar solo .NET Core App
$coreApps = $installed | Where-Object { $_.Product -eq "Microsoft.NETCore.App" }

Write-Host "`nüõ°Ô∏è  Analizando vulnerabilidades..." -ForegroundColor Cyan
$updates = @()

foreach ($cve in $cves) {
    foreach ($range in $cve.Ranges) {
        $minVer = [version]$range.Min
        $maxVer = [version]$range.Max
        $patchVer = [version]$range.Patch

        $vulnerable = $coreApps | Where-Object {
            Test-VersionInRange -Version $_.Version -Min $minVer -Max $maxVer
        }

        foreach ($vuln in $vulnerable) {
            $targetVersion = $range.Patch
            $downloadUrl = Get-DotNetDownloadUrl -Version $patchVer
            $installerPath = "$env:TEMP\dotnet-runtime-$targetVersion-win-x64.exe"

            $updates += [PSCustomObject]@{
                CVE         = $cve.Id
                Current     = $vuln.VersionString
                Target      = $targetVersion
                TargetObj   = $patchVer
                Product     = $vuln.Product
                DownloadUrl = $downloadUrl
                Installer   = $installerPath
            }
        }
    }
}

# Eliminar duplicados
$updates = $updates | Sort-Object TargetObj -Unique

# --- Mostrar resumen de parches ---
if ($updates.Count -eq 0) {
    Write-Host "`n‚úÖ Todas las versiones est√°n actualizadas." -ForegroundColor Green
} else {
    Write-Host "`n‚ö†Ô∏è  Se requieren actualizaciones de seguridad:" -ForegroundColor Yellow
    $updates | Format-Table CVE, Current, Target -AutoSize

    Write-Host "`n¬øDesea aplicar autom√°ticamente los parches de seguridad? (s/n)" -ForegroundColor Cyan
    $apply = Read-Host
    if ($apply -match '^(s|y|yes|si)$') {
        foreach ($update in $updates) {
            Write-Host "`n‚¨áÔ∏è  Descargando .NET Runtime v$($update.Target)..." -ForegroundColor Green
            try {
                if (-not $update.DownloadUrl) {
                    Write-Warning "‚ùå No se pudo generar la URL de descarga para v$($update.Target)"
                    continue
                }

                Invoke-WebRequest -Uri $update.DownloadUrl -OutFile $update.Installer -ErrorAction Stop
                Write-Host "‚úÖ Descargado: $($update.Installer)"

                Write-Host "üöÄ Instalando... (modo silencioso)" -ForegroundColor Cyan
                $proc = Start-Process -FilePath $update.Installer -ArgumentList "/install", "/quiet", "/norestart" -Wait -PassThru

                if ($proc.ExitCode -in @(0, 3010)) {
                    Write-Host "‚úîÔ∏è  Instalado correctamente v$($update.Target)"
                } else {
                    Write-Error "‚ùå Fallo en instalaci√≥n. C√≥digo: $($proc.ExitCode)"
                }
            } catch {
                Write-Error "‚ùå Error al descargar o instalar: $($_.Exception.Message)"
            }
        }
    }
}

# --- Recomendaci√≥n: Actualizar a .NET 9 ---
Write-Host "`nüí° ¬øDesea actualizar a .NET 9, la versi√≥n m√°s reciente y segura?" -ForegroundColor Green
Write-Host "üëâ .NET 9 es m√°s r√°pido, seguro y con mejor soporte para IA y Cloud." -ForegroundColor White
Write-Host "üîó Disponible en: https://dotnet.microsoft.com/en-us/download/dotnet/9.0" -ForegroundColor Blue

$upgradeTo9 = Read-Host "`n¬øDescargar e instalar .NET 9 Runtime? (s/n)"
if ($upgradeTo9 -match '^(s|y|yes|si)$') {
    $dotnet9Url = "https://download.visualstudio.microsoft.com/download/pr/99bd07c2-c95c-44dc-9d47-36d3b18df240/bdf26c62f69c1b783687c1dce83ccf7a/dotnet-runtime-9.0.0-win-x64.exe"
    $installer9 = "$env:TEMP\dotnet-runtime-9.0.0-win-x64.exe"

    Write-Host "‚¨áÔ∏è  Descargando .NET 9 Runtime..." -ForegroundColor Green
    try {
        Invoke-WebRequest -Uri $dotnet9Url -OutFile $installer9 -ErrorAction Stop
        Write-Host "‚úÖ Descargado: $installer9"

        Write-Host "üöÄ Instalando .NET 9..." -ForegroundColor Cyan
        $proc = Start-Process -FilePath $installer9 -ArgumentList "/install", "/quiet", "/norestart" -Wait -PassThru

        if ($proc.ExitCode -in @(0, 3010)) {
            Write-Host "üéâ ¬°.NET 9 instalado correctamente!" -ForegroundColor Green
        } else {
            Write-Error "‚ùå Error al instalar .NET 9. C√≥digo: $($proc.ExitCode)"
        }
    } catch {
        Write-Error "‚ùå No se pudo descargar .NET 9: $($_.Exception.Message)"
        Write-Host "üí° Visita: https://dotnet.microsoft.com/en-us/download/dotnet/9.0 para descargar manualmente."
    }
}

Write-Host "`n‚úÖ An√°lisis y actualizaci√≥n completados." -ForegroundColor Green
Write-Host "‚û°Ô∏è  Reinicia los servicios o el servidor si es necesario." -ForegroundColor Yellow

# =========================================
# Script: Cleanup Old .NET SDKs, Runtimes, and Frameworks
# =========================================

# -----------------------------
# Configuración: versiones a mantener
# -----------------------------
$latestSDKVersion       = "8.0.7"    # SDK más reciente a mantener
$latestRuntimeVersion   = "8.0.7"    # Runtime más reciente a mantener
$minFrameworkVersion    = "4.8.1"    # Framework mínimo a mantener

# -----------------------------
# Función para desinstalar productos desde registro
# -----------------------------
function Uninstall-Product {
    param (
        [string]$NamePattern,
        [string]$MinVersion
    )

    $uninstallPaths = @(
        "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall",
        "HKLM:\SOFTWARE\WOW6432Node\Microsoft\Windows\CurrentVersion\Uninstall"
    )

    foreach ($path in $uninstallPaths) {
        $keys = Get-ChildItem $path -ErrorAction SilentlyContinue
        foreach ($key in $keys) {
            $props = Get-ItemProperty $key.PSPath -ErrorAction SilentlyContinue
            if ($props.DisplayName -and $props.DisplayVersion -and $props.UninstallString) {
                if ($props.DisplayName -match $NamePattern) {
                    try {
                        if ([version]$props.DisplayVersion -lt [version]$MinVersion) {
                            Write-Host "Desinstalando $($props.DisplayName) versión $($props.DisplayVersion)..."
                            Start-Process -FilePath "cmd.exe" -ArgumentList "/c $($props.UninstallString) /quiet /norestart" -Wait
                            Write-Host "Desinstalación completada: $($props.DisplayName)"
                        }
                    } catch {
                        Write-Warning "Error al procesar $($props.DisplayName): $_"
                    }
                }
            }
        }
    }
}

# -----------------------------
# Función para desinstalar SDKs y Runtimes usando Win32_Product
# -----------------------------
function Uninstall-OldMSIProducts {
    param (
        [string]$NamePattern,
        [string]$MinVersion
    )

    $products = Get-WmiObject -Class Win32_Product | Where-Object {
        $_.Name -match $NamePattern
    }

    foreach ($prod in $products) {
        try {
            if ([version]$prod.Version -lt [version]$MinVersion) {
                Write-Host "Desinstalando $($prod.Name) versión $($prod.Version)..."
                $prod.Uninstall() | Out-Null
                Write-Host "Desinstalación completada: $($prod.Name)"
            }
        } catch {
            Write-Warning "Error al desinstalar $($prod.Name): $_"
        }
    }
}

# -----------------------------
# Ejecutar limpieza de SDKs
# -----------------------------
Write-Host "=== Limpiando SDKs obsoletos de .NET ==="
Uninstall-Product -NamePattern "Microsoft .NET SDK" -MinVersion $latestSDKVersion
Uninstall-OldMSIProducts -NamePattern "Microsoft .NET SDK" -MinVersion $latestSDKVersion

# -----------------------------
# Ejecutar limpieza de Runtimes (Core, ASP.NET Core, WindowsDesktop.App)
# -----------------------------
Write-Host "=== Limpiando Runtimes obsoletos de .NET ==="
Uninstall-Product -NamePattern "Microsoft ASP.NET Core" -MinVersion $latestRuntimeVersion
Uninstall-Product -NamePattern "Microsoft .NET Core" -MinVersion $latestRuntimeVersion
Uninstall-Product -NamePattern "Microsoft WindowsDesktop.App" -MinVersion $latestRuntimeVersion
Uninstall-OldMSIProducts -NamePattern "Microsoft ASP.NET Core" -MinVersion $latestRuntimeVersion
Uninstall-OldMSIProducts -NamePattern "Microsoft .NET Core" -MinVersion $latestRuntimeVersion
Uninstall-OldMSIProducts -NamePattern "Microsoft WindowsDesktop.App" -MinVersion $latestRuntimeVersion

# -----------------------------
# Ejecutar limpieza de .NET Framework obsoletos
# -----------------------------
Write-Host "=== Limpiando .NET Framework obsoletos ==="
Uninstall-Product -NamePattern "Microsoft .NET Framework" -MinVersion $minFrameworkVersion
Uninstall-OldMSIProducts -NamePattern "Microsoft .NET Framework" -MinVersion $minFrameworkVersion

Write-Host "=== Proceso de limpieza completado ==="

# PowerShell Script: Remove Older .NET Versions (Fixed for Windows Server 2022)

# Minimum versions to keep (adjust as needed)
$minVersions = @{
    "Microsoft .NET SDK"           = "8.0.7"
    "Microsoft ASP.NET Core"       = "8.0.7"
    "Microsoft .NET Core"          = "8.0.7"
    "Microsoft WindowsDesktop.App" = "8.0.7"
    "Microsoft .NET Framework"     = "4.8.1"
}

# Function to compare versions
function Test-OlderVersion($installed, $minimum) {
    if ([string]::IsNullOrEmpty($installed)) { return $false }
    try {
        return [version]$installed -lt [version]$minimum
    } catch {
        return $false
    }
}

# Function to remove older products via Win32_Product
function Remove-OldProduct {
    Write-Host "Scanning for installed products..."
    $products = Get-WmiObject -Class Win32_Product | Where-Object {
        $keep = $false
        foreach ($key in $minVersions.Keys) {
            if ($_.Name -match $key) { $keep = $true; break }
        }
        return $keep
    }

    foreach ($prod in $products) {
        foreach ($key in $minVersions.Keys) {
            if ($prod.Name -match $key) {
                if (Test-OlderVersion $prod.Version $minVersions[$key]) {
                    Write-Host "Uninstalling $($prod.Name) version $($prod.Version)..."
                    try {
                        $prod.Uninstall() | Out-Null
                        Write-Host "Successfully uninstalled $($prod.Name)."
                    } catch {
                        Write-Warning "Failed to uninstall $($prod.Name): $_"
                    }
                }
            }
        }
    }
}

# Function to remove older products via registry
function Remove-OldProductFromRegistry {
    $uninstallPaths = @(
        "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall",
        "HKLM:\SOFTWARE\WOW6432Node\Microsoft\Windows\CurrentVersion\Uninstall"
    )

    foreach ($path in $uninstallPaths) {
        $keys = Get-ChildItem $path -ErrorAction SilentlyContinue
        foreach ($key in $keys) {
            $props = Get-ItemProperty $key.PSPath -ErrorAction SilentlyContinue
            $name = $props.DisplayName
            $version = $props.DisplayVersion
            foreach ($prodKey in $minVersions.Keys) {
                if ($name -and ($name -match $prodKey) -and (Test-OlderVersion $version $minVersions[$prodKey])) {
                    $uninstallString = $props.UninstallString
                    if ($uninstallString) {
                        Write-Host "Uninstalling $name version $version..."
                        # Escapar comillas para rutas con espacios
                        $args = "/c `"$uninstallString`" /quiet /norestart"
                        Start-Process -FilePath "cmd.exe" -ArgumentList $args -Wait
                    }
                }
            }
        }
    }
}

# Execute remove functions
Remove-OldProduct
Remove-OldProductFromRegistry

Write-Host "Older .NET products cleanup completed."

# Detecta versiones de .NET vulnerables y sugiere/aplica parches oficiales
# CVE-2024-30045, CVE-2024-38229, CVE-2025-21172, CVE-2024-35264

function Get-NetCoreVersions {
    $corePaths = @(
        "C:\Program Files\dotnet\shared\Microsoft.NETCore.App",
        "C:\Program Files\dotnet\shared\Microsoft.WindowsDesktop.App",
        "C:\Program Files\dotnet\shared\Microsoft.AspNetCore.App"
    )
    $verList = @()
    foreach ($path in $corePaths) {
        if (Test-Path $path) {
            $verList += Get-ChildItem $path | Select-Object @{n="Product";e={Split-Path $path -Leaf}}, @{n="Version";e={$_.Name}}
        }
    }
    return $verList
}

# Rangos vulnerables y parches (según Microsoft)
$cveVulnerabilities = @(
    @{
        Id = "CVE-2024-30045"
        Product = "Microsoft.NETCore.App"
        Ranges = @(
            @{ Min="6.0.0"; Max="6.0.29"; Patch="6.0.29" },
            @{ Min="7.0.0"; Max="7.0.18"; Patch="7.0.18" },
            @{ Min="8.0.0"; Max="8.0.4"; Patch="8.0.4" }
        )
        Ref = "https://msrc.microsoft.com/update-guide/vulnerability/CVE-2024-30045"
    },
    @{
        Id = "CVE-2024-38229"
        Product = "Microsoft.NETCore.App"
        Ranges = @(
            @{ Min="8.0.0"; Max="8.0.5"; Patch="8.0.5" },
            @{ Min="6.0.0"; Max="6.0.30"; Patch="6.0.30" }
        )
        Ref = "https://msrc.microsoft.com/update-guide/vulnerability/CVE-2024-38229"
    },
    @{
        Id = "CVE-2025-21172"
        Product = "Microsoft.NETCore.App"
        Ranges = @(
            @{ Min="8.0.0"; Max="8.0.6"; Patch="8.0.6" },
            @{ Min="6.0.0"; Max="6.0.31"; Patch="6.0.31" }
        )
        Ref = "https://msrc.microsoft.com/update-guide/vulnerability/CVE-2025-21172"
    },
    @{
        Id = "CVE-2024-35264"
        Product = "Microsoft.NETCore.App"
        Ranges = @(
            @{ Min="6.0.0"; Max="6.0.28"; Patch="6.0.28" },
            @{ Min="7.0.0"; Max="7.0.17"; Patch="7.0.17" },
            @{ Min="8.0.0"; Max="8.0.3"; Patch="8.0.3" }
        )
        Ref = "https://msrc.microsoft.com/update-guide/vulnerability/CVE-2024-35264"
    }
)

# URLS base para descargar runtimes oficiales de Microsoft (modifica según arquitectura si lo necesitas)
function Get-DownloadUrl($major, $patch) {
    $arch = "x64"
    return "https://download.visualstudio.microsoft.com/download/pr/$(if($major -eq "6.0"){"9e9b5a3e-6d6e-4e48-9f7f-43c0f7a1c788/7e1b4953b7cd7767b7b8e4ee6da1e4c6/dotnet-runtime-6.0.$patch-win-$arch.exe"}
        elseif($major -eq "7.0"){"f3ab9fbc-f38a-4d03-8e4f-7c803e1bfc7a/c7c10189e7f5d6d0c635d5c4e4cfd1e8/dotnet-runtime-7.0.$patch-win-$arch.exe"}
        elseif($major -eq "8.0"){"8d1f97f3-50e8-4e95-952c-bbe5e63a8c35/9db1b2b7e6b7f6b3c8e1e8a8c8b7d1c6/dotnet-runtime-8.0.$patch-win-$arch.exe"}
        else{""})"
}

function Is-VersionInRange($ver, $min, $max) {
    try {
        return ([version]$ver -ge [version]$min) -and ([version]$ver -lt [version]$max)
    } catch {
        return $false
    }
}

$core = Get-NetCoreVersions

Write-Host "`n--- Detectando versiones instaladas de .NET ---`n" -ForegroundColor Cyan
$core | ForEach-Object { Write-Host "$($_.Product) $($_.Version)" }

Write-Host "`n--- Comprobando vulnerabilidades y parches ---`n" -ForegroundColor Yellow

$installsToPatch = @()

foreach ($cve in $cveVulnerabilities) {
    Write-Host "[$($cve.Id)] $($cve.Ref)" -ForegroundColor Magenta
    $found = $false
    foreach ($item in $core) {
        if ($item.Product -eq "Microsoft.NETCore.App") {
            foreach ($range in $cve.Ranges) {
                if (Is-VersionInRange $item.Version $range.Min $range.Max) {
                    $major = ($item.Version -split '\.')[0..1] -join "."
                    $patch = $range.Patch
                    Write-Host "  VULNERABLE: $($item.Product) $($item.Version)  --> Debe actualizar a $major.$patch" -ForegroundColor Red
                    $url = Get-DownloadUrl $major $patch
                    if ($url -ne "") {
                        Write-Host "    Descarga el parche oficial de Microsoft:"
                        Write-Host "    $url" -ForegroundColor Blue
                        $installsToPatch += @{Version=$item.Version;Major=$major;Patch=$patch;Url=$url}
                    } else {
                        Write-Host "    No se encontró URL directa, busca manualmente en https://dotnet.microsoft.com/en-us/download/dotnet"
                    }
                    $found = $true
                }
            }
        }
    }
    if (-not $found) {
        Write-Host "  Ninguna versión instalada es vulnerable a este CVE." -ForegroundColor Green
    }
    Write-Host ""
}

if ($installsToPatch.Count -gt 0) {
    Write-Host "`n¿Deseas descargar y ejecutar automáticamente los instaladores de los parches? (s/n)"
    $resp = Read-Host
    if ($resp -eq "s") {
        foreach ($patch in $installsToPatch) {
            $file = "$env:TEMP\dotnet-runtime-$($patch.Major)-$($patch.Patch).exe"
            Write-Host "Descargando $($patch.Url)..."
            Invoke-WebRequest $patch.Url -OutFile $file
            Write-Host "Ejecutando instalador... Acepta los prompts de Windows para continuar."
            Start-Process -FilePath $file -Wait
        }
        Write-Host "Actualización completada. Se recomienda reiniciar los servicios o el servidor si es necesario."
    } else {
        Write-Host "No se descargaron ni ejecutaron parches automáticamente. Descárgalos y ejecútalos manualmente desde los enlaces mostrados." -ForegroundColor Yellow
    }
} else {
    Write-Host "Todas las versiones instaladas están actualizadas respecto a los CVEs analizados." -ForegroundColor Green
}

Write-Host "`n¡Análisis y sugerencia de parches completado!"

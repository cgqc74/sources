
<#
.SYNOPSIS
  Detecta versiones vulnerables de .NET Core, .NET Framework y Visual Studio relacionadas con CVE-2024-38081.

.DESCRIPTION
  Este script identifica si existen versiones vulnerables de .NET Core/SDK, .NET Framework y Visual Studio 2022,
  y sugiere actualizaciones.

.NOTAS
  Requiere permisos de administrador para leer ciertas claves del registro.
#>

function Get-DotNetSdkVersions {
    Write-Host "`nüì¶ SDKs de .NET instalados:"
    $dotnet = "${env:ProgramFiles}\dotnet\dotnet.exe"
    if (Test-Path $dotnet) {
        & $dotnet --list-sdks | ForEach-Object {
            $version = ($_ -split '\s+\[')[0]
            if ($version -lt '6.0.32') {
                Write-Warning "  ‚ö†Ô∏è SDK vulnerable detectado: $version"
            } else {
                Write-Host "  ‚úÖ SDK seguro: $version"
            }
        }
    } else {
        Write-Warning "  ‚ùå dotnet.exe no encontrado"
    }
}

function Get-DotNetRuntimeVersions {
    Write-Host "`n‚öôÔ∏è Runtimes de .NET instalados:"
    $dotnet = "${env:ProgramFiles}\dotnet\dotnet.exe"
    if (Test-Path $dotnet) {
        & $dotnet --list-runtimes | ForEach-Object {
            $version = ($_ -split '\s+\[')[0] -replace '^.*\s', ''
            if ($version -lt '6.0.32') {
                Write-Warning "  ‚ö†Ô∏è Runtime vulnerable detectado: $version"
            } else {
                Write-Host "  ‚úÖ Runtime seguro: $version"
            }
        }
    }
}

function Get-FrameworkVersions {
    Write-Host "`nüóÇ Versiones de .NET Framework instaladas:"
    $keys = Get-ChildItem "HKLM:\SOFTWARE\Microsoft\NET Framework Setup\NDP" -Recurse |
            Where-Object { $_.GetValue("Version") -ne $null }

    foreach ($key in $keys) {
        $version = $key.GetValue("Version")
        $name = $key.PSChildName
        if ($version -and ($version -like "2.*" -or $version -like "3.*" -or $version -like "4.6*" -or $version -like "4.7*" -or $version -like "4.8*")) {
            Write-Warning "  ‚ö†Ô∏è Framework vulnerable: $name ($version)"
        } else {
            Write-Host "  ‚úÖ Framework seguro: $name ($version)"
        }
    }
}

function Check-VisualStudio2022 {
    Write-Host "`nüõ† Visual Studio 2022:"
    $vsPath = "HKLM:\SOFTWARE\WOW6432Node\Microsoft\VisualStudio\SxS\VS7"
    if (Test-Path $vsPath) {
        Get-ItemProperty -Path $vsPath | ForEach-Object {
            foreach ($name in $_.PSObject.Properties.Name) {
                if ($name -like "17.*") {
                    $ver = $name
                    $vsFolder = $_.$ver
                    $devenvPath = Join-Path $vsFolder "Common7\IDE\devenv.exe"
                    if (Test-Path $devenvPath) {
                        $fileVersion = (Get-Item $devenvPath).VersionInfo.FileVersion
                        Write-Host "  üîπ VS $ver instalado: $fileVersion"
                        if ($fileVersion -lt "17.4.21" -or ($fileVersion -ge "17.6.0" -and $fileVersion -lt "17.6.17") -or ($fileVersion -ge "17.8.0" -and $fileVersion -lt "17.8.12")) {
                            Write-Warning "  ‚ö†Ô∏è Visual Studio versi√≥n vulnerable detectada"
                        } else {
                            Write-Host "  ‚úÖ Visual Studio seguro"
                        }
                    }
                }
            }
        }
    } else {
        Write-Host "  ‚ùå Visual Studio 2022 no detectado"
    }
}

# ========================== EJECUCI√ìN ==========================

Write-Host "`nüîé Iniciando detecci√≥n de versiones vulnerables relacionadas con CVE-2024-38081..." -ForegroundColor Cyan

Get-DotNetSdkVersions
Get-DotNetRuntimeVersions
Get-FrameworkVersions
Check-VisualStudio2022

Write-Host "`n‚úÖ Revisi√≥n completada. Aplica actualizaciones si se detectaron versiones vulnerables." -ForegroundColor Green

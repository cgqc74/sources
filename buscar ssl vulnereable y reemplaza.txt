# Configuraci√≥n
$SafeVersion = "3.0.15"
$ZipUrl = "https://tu-servidor/openssl-3.0.15.zip"   # ‚úÖ Reemplazar con la URL real del ZIP seguro
$TempZip = "$env:TEMP\openssl-$SafeVersion.zip"
$ExtractDir = "$env:TEMP\openssl_secure_$SafeVersion"
$TargetFiles = @("libssl-3-x64.dll", "libcrypto-3-x64.dll")
$SearchDirs = @("C:\Program Files\", "C:\Program Files (x86)\", "C:\Windows\System32")

# 1. Descargar ZIP con las nuevas DLL
Write-Host "üîΩ Descargando OpenSSL seguro versi√≥n $SafeVersion..."
Invoke-WebRequest -Uri $ZipUrl -OutFile $TempZip -UseBasicParsing

# 2. Extraer ZIP
if (Test-Path $ExtractDir) { Remove-Item -Recurse -Force $ExtractDir }
Expand-Archive -Path $TempZip -DestinationPath $ExtractDir
Write-Host "‚úÖ Librer√≠as extra√≠das en: $ExtractDir"

# 3. Buscar archivos vulnerables en disco
Write-Host "`nüîç Buscando archivos DLL vulnerables en el sistema..."
foreach ($target in $TargetFiles) {
    $matches = Get-ChildItem -Path $SearchDirs -Recurse -Include $target -ErrorAction SilentlyContinue

    foreach ($file in $matches) {
        Write-Host "`n‚ö†Ô∏è Encontrado: $($file.FullName)"

        # Crear respaldo del archivo
        $backupPath = "$($file.FullName).bak"
        Copy-Item -Path $file.FullName -Destination $backupPath -Force
        Write-Host "üóÇÔ∏è Backup creado: $backupPath"

        # Reemplazar con versi√≥n segura
        $newFile = Join-Path $ExtractDir $target
        if (Test-Path $newFile) {
            Copy-Item -Path $newFile -Destination $file.FullName -Force
            Write-Host "üîÑ Reemplazado con la versi√≥n segura: $target"
        } else {
            Write-Warning "üö´ No se encontr√≥ la nueva DLL para: $target"
        }
    }
}

# 4. Limpieza
Remove-Item $TempZip -Force
Remove-Item -Recurse -Force $ExtractDir

Write-Host "`n‚úÖ Proceso completado. Reinicia cualquier aplicaci√≥n que use OpenSSL para aplicar los cambios."

# MitigarCVE_Automatico_Optimizdo.ps1
# Script automatizado: descarga, instala KBs y genera reporte en Windows Server 2022

$logPath = "C:\Logs\Mitigaciones"
$tempPath = "$env:TEMP\KBDownloads"
$timestamp = Get-Date -Format "yyyyMMdd_HHmmss"
$reportFile = Join-Path $logPath "Mitigacion_CVEs_$timestamp.csv"

# Crear carpetas
if (-not (Test-Path $logPath)) { New-Item -ItemType Directory -Path $logPath -Force }
if (-not (Test-Path $tempPath)) { New-Item -ItemType Directory -Path $tempPath -Force }

# Lista de CVEs y sus KBs asociados
$CVE_KB = @{
    "CVE-2024-21386" = "KB5035855"
    "CVE-2021-43877" = "KB5008223"
    "CVE-2021-34532" = "KB5005575"
    "CVE-2021-1723"  = "KB5007206"
    "CVE-2020-1597"  = "KB5007206"
    "CVE-2020-1045"  = "KB4598230"
    "CVE-2022-41089" = "KB5019966"
    "CVE-2022-38013" = "KB5018419"
    "CVE-2022-34716" = "KB5016627"
    "CVE-2022-30184" = "KB5018421"
    "CVE-2022-29145" = "KB5014678"
    "CVE-2022-29117" = "KB5014678"
    "CVE-2022-24512" = "KB5011487"
    "CVE-2022-24464" = "KB5011497"
    "CVE-2022-23267" = "KB5009555"
    "CVE-2021-34485" = "KB5007206"
    "CVE-2021-31204" = "KB5007206"
    "CVE-2021-26701" = "KB5007206"
    "CVE-2021-31957" = "KB5004238"
    "CVE-2021-26423" = "KB5007206"
    "CVE-2021-24112" = "KB5009555"
    "CVE-2021-1721"  = "KB5007206"
}

# Función para descargar MSU automáticamente
function Descargar-KB {
    param([string]$kb)
    $searchUrl = "https://www.catalog.update.microsoft.com/Search.aspx?q=$kb"

    try {
        $html = Invoke-WebRequest -Uri $searchUrl -UseBasicParsing
        $linkPattern = 'href="(/Download.+?\.msu)"'
        $matches = [regex]::Matches($html.Content, $linkPattern)

        if ($matches.Count -eq 0) {
            Write-Host "No se encontró enlace directo para $kb" -ForegroundColor Red
            return $null
        }

        $downloadUrl = "https://www.catalog.update.microsoft.com$($matches[0].Groups[1].Value)"
        $filePath = Join-Path $tempPath "$kb.msu"

        Write-Host "Descargando $kb desde $downloadUrl..." -ForegroundColor Yellow
        Invoke-WebRequest -Uri $downloadUrl -OutFile $filePath
        return $filePath
    }
    catch {
        Write-Host "Error descargando $kb: $_" -ForegroundColor Red
        return $null
    }
}

# Función para instalar KB
function Instalar-KB {
    param([string]$filePath)
    if (Test-Path $filePath) {
        try {
            Start-Process "wusa.exe" -ArgumentList "$filePath /quiet /norestart" -Wait
            return $true
        }
        catch {
            Write-Host "Error instalando $filePath: $_" -ForegroundColor Red
            return $false
        }
    } else { return $false }
}

# Función para verificar KB instalado
function Verificar-KB {
    param([string]$kb)
    return (Get-HotFix -Id $kb -ErrorAction SilentlyContinue) -ne $null
}

$report = @()
Write-Host "=== Iniciando mitigación automatizada de CVEs ===" -ForegroundColor Cyan

foreach ($cve in $CVE_KB.Keys) {
    $kb = $CVE_KB[$cve]
    Write-Host "`nVerificando $cve ($kb)..." -ForegroundColor Yellow

    if (Verificar-KB -kb $kb) {
        Write-Host "$kb ya está instalado." -ForegroundColor Green
        $mitigated = "Sí"
    }
    else {
        $filePath = Descargar-KB -kb $kb
        if ($filePath -ne $null) {
            if (Instalar-KB -filePath $filePath) {
                $mitigated = if (Verificar-KB -kb $kb) { "Sí" } else { "No" }
            }
            else { $mitigated = "No" }
        }
        else { $mitigated = "No" }
    }

    $report += [PSCustomObject]@{
        CVE = $cve
        KB = $kb
        Instalado = if (Verificar-KB -kb $kb) { "Sí" } else { "No" }
        Mitigado = $mitigated
    }
}

# Exportar reporte
$report | Export-Csv -Path $reportFile -NoTypeInformation -Encoding UTF8
Write-Host "`n=== Proceso finalizado ==="
Write-Host "Reporte generado en: $reportFile" -ForegroundColor Magenta

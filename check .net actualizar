# Detectar todas las versiones de .NET Framework y .NET Core/.NET instaladas y actualizar automáticamente si es necesario.
# Se requiere ejecutar como Administrador e Internet activo.

Write-Host "Detectando versiones instaladas de .NET Framework..." -ForegroundColor Cyan

function Get-DotNetFrameworkVersionFromRelease($release) {
    switch ($release) {
        { $_ -ge 533325 } { return ".NET Framework 4.8.1 o superior"; break }
        { $_ -ge 528040 } { return ".NET Framework 4.8"; break }
        { $_ -ge 461808 } { return ".NET Framework 4.7.2"; break }
        { $_ -ge 461308 } { return ".NET Framework 4.7.1"; break }
        { $_ -ge 460798 } { return ".NET Framework 4.7"; break }
        { $_ -ge 394802 } { return ".NET Framework 4.6.2"; break }
        { $_ -ge 394254 } { return ".NET Framework 4.6.1"; break }
        { $_ -ge 393295 } { return ".NET Framework 4.6"; break }
        { $_ -ge 379893 } { return ".NET Framework 4.5.2"; break }
        { $_ -ge 378675 } { return ".NET Framework 4.5.1"; break }
        { $_ -ge 378389 } { return ".NET Framework 4.5"; break }
        default { return "Versión desconocida o anterior a 4.5" }
    }
}

# Paso 1: Detectar .NET Framework instalados
$netFrameworks = Get-ChildItem 'HKLM:\SOFTWARE\Microsoft\NET Framework Setup\NDP' -Recurse |
    Get-ItemProperty -ErrorAction SilentlyContinue |
    Where-Object { $_.Version -or $_.Release -or $_.PSChildName -match '^(?!S)\p{L}.*' } |
    Select-Object PSChildName, Version, Release, Install, InstallPath

$found = $false
$highestRelease = 0

foreach ($fw in $netFrameworks) {
    if ($fw.Version) {
        Write-Host "Encontrada: $($fw.PSChildName)  Version: $($fw.Version)"
        $found = $true
    } elseif ($fw.Release) {
        $ver = Get-DotNetFrameworkVersionFromRelease $fw.Release
        Write-Host "Encontrada: $($fw.PSChildName)  Release: $($fw.Release)  [$ver]"
        $found = $true
        if ($fw.Release -gt $highestRelease) { $highestRelease = $fw.Release }
    }
}

# Paso 2: Instalar/Actualizar .NET Framework 4.8.1 si es necesario
$ultimaRelease = 533325 # Release key para 4.8.1
if ($highestRelease -ge $ultimaRelease) {
    Write-Host "`nYa tienes instalada la última versión de .NET Framework (4.8.1 o superior)." -ForegroundColor Green
} else {
    Write-Host "`nActualizando automáticamente a .NET Framework 4.8.1..." -ForegroundColor Cyan

    $url = "https://download.visualstudio.microsoft.com/download/pr/d0a0d32f-3e09-4a7c-8d2e-4e3a2f7e0e0b/ab6e1f5f7f6ed97b9d4a74c0cf1e2f46/ndp481-x86-x64-allos-enu.exe"
    $file = "$env:TEMP\ndp481-x86-x64-allos-enu.exe"

    Write-Host "Descargando instalador desde $url..."
    Invoke-WebRequest -Uri $url -OutFile $file

    if (Test-Path $file) {
        Write-Host "Ejecutando instalador de .NET Framework 4.8.1 en modo silencioso..."
        Start-Process -FilePath $file -ArgumentList "/quiet", "/norestart" -Wait

        Write-Host "`nInstalación completada. Es recomendable reiniciar el equipo para finalizar la actualización de .NET Framework." -ForegroundColor Green
        Remove-Item $file -Force
    } else {
        Write-Host "No se pudo descargar el instalador de .NET Framework. Verifica tu conexión a internet." -ForegroundColor Red
    }
}

# Paso 3: Detectar SDKs de .NET Core y .NET 5+ instalados
Write-Host "`nBuscando SDKs de .NET Core/.NET 5+ instalados..." -ForegroundColor Green
if (Get-Command "dotnet" -ErrorAction SilentlyContinue) {
    $sdks = dotnet --list-sdks
    if ($sdks) {
        Write-Host "SDKs encontrados:" -ForegroundColor White
        $sdks
    } else {
        Write-Host "No se detectó ningún SDK de .NET Core/.NET 5+ instalado." -ForegroundColor Yellow
    }

    # Paso 4: Descargar e instalar la última versión de .NET SDK (8.0 LTS) automáticamente usando winget si está disponible
    if (Get-Command "winget" -ErrorAction SilentlyContinue) {
        Write-Host "`nActualizando/Instalando .NET SDK 8 (LTS) usando winget..." -ForegroundColor Cyan
        winget install --id Microsoft.DotNet.SDK.8 --silent --accept-package-agreements --accept-source-agreements
        Write-Host "Actualización de .NET SDK 8 completada (revisa la salida para detalles)." -ForegroundColor Green
    } else {
        Write-Host "`nNo se encontró winget en este sistema. Descarga manualmente el último .NET SDK desde:" -ForegroundColor Yellow
        Write-Host "https://dotnet.microsoft.com/es-es/download/dotnet/8.0" -ForegroundColor Cyan
    }
} else {
    Write-Host "El comando 'dotnet' no está disponible en el PATH. Instalando .NET SDK 8..." -ForegroundColor Yellow
    if (Get-Command "winget" -ErrorAction SilentlyContinue) {
        winget install --id Microsoft.DotNet.SDK.8 --silent --accept-package-agreements --accept-source-agreements
        Write-Host "Instalación de .NET SDK 8 completada (revisa la salida para detalles)." -ForegroundColor Green
    } else {
        Write-Host "No se encontró winget en este sistema. Descarga manualmente el último .NET SDK desde:" -ForegroundColor Yellow
        Write-Host "https://dotnet.microsoft.com/es-es/download/dotnet/8.0" -ForegroundColor Cyan
    }
}

Write-Host "`nPasos realizados:"
Write-Host "1. Detección de versiones instaladas de .NET Framework."
Write-Host "2. Descarga e instalación automática de .NET Framework 4.8.1 si era necesario."
Write-Host "3. Detección de SDKs de .NET Core y .NET 5+ instalados."
Write-Host "4. Instalación/actualización automática de .NET SDK 8 usando winget si está disponible."
Write-Host "`n**Reinicia el sistema después de la actualización para aplicar los cambios correctamente.**" -ForegroundColor Magenta

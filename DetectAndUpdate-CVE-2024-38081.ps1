
<#
.SYNOPSIS
  Detecta versiones vulnerables de .NET Core, .NET Framework y Visual Studio relacionadas con CVE-2024-38081.

.DESCRIPTION
  Este script identifica si existen versiones vulnerables de .NET Core/SDK, .NET Framework y Visual Studio 2022,
  y sugiere actualizaciones.

.NOTAS
  Requiere permisos de administrador para leer ciertas claves del registro.
#>

function Get-DotNetSdkVersions {
    Write-Host "`nüì¶ SDKs de .NET instalados:"
    $dotnet = "${env:ProgramFiles}\dotnet\dotnet.exe"
    if (Test-Path $dotnet) {
        & $dotnet --list-sdks | ForEach-Object {
            $version = ($_ -split '\s+\[')[0]
            if ($version -lt '6.0.32') {
                Write-Warning "  ‚ö†Ô∏è SDK vulnerable detectado: $version"
            } else {
                Write-Host "  ‚úÖ SDK seguro: $version"
            }
        }
    } else {
        Write-Warning "  ‚ùå dotnet.exe no encontrado"
    }
}

function Get-DotNetRuntimeVersions {
    Write-Host "`n‚öôÔ∏è Runtimes de .NET instalados:"
    $dotnet = "${env:ProgramFiles}\dotnet\dotnet.exe"
    if (Test-Path $dotnet) {
        & $dotnet --list-runtimes | ForEach-Object {
            $version = ($_ -split '\s+\[')[0] -replace '^.*\s', ''
            if ($version -lt '6.0.32') {
                Write-Warning "  ‚ö†Ô∏è Runtime vulnerable detectado: $version"
            } else {
                Write-Host "  ‚úÖ Runtime seguro: $version"
            }
        }
    }
}

function Get-FrameworkVersions {
    Write-Host "`nüóÇ Versiones de .NET Framework instaladas:"
    $keys = Get-ChildItem "HKLM:\SOFTWARE\Microsoft\NET Framework Setup\NDP" -Recurse |
            Where-Object { $_.GetValue("Version") -ne $null }

    foreach ($key in $keys) {
        $version = $key.GetValue("Version")
        $name = $key.PSChildName
        if ($version -and ($version -like "2.*" -or $version -like "3.*" -or $version -like "4.6*" -or $version -like "4.7*" -or $version -like "4.8*")) {
            Write-Warning "  ‚ö†Ô∏è Framework vulnerable: $name ($version)"
        } else {
            Write-Host "  ‚úÖ Framework seguro: $name ($version)"
        }
    }
}

function Check-VisualStudio2022 {
    Write-Host "`nüõ† Visual Studio 2022:"
    $vsPath = "HKLM:\SOFTWARE\WOW6432Node\Microsoft\VisualStudio\SxS\VS7"
    if (Test-Path $vsPath) {
        Get-ItemProperty -Path $vsPath | ForEach-Object {
            foreach ($name in $_.PSObject.Properties.Name) {
                if ($name -like "17.*") {
                    $ver = $name
                    $vsFolder = $_.$ver
                    $devenvPath = Join-Path $vsFolder "Common7\IDE\devenv.exe"
                    if (Test-Path $devenvPath) {
                        $fileVersion = (Get-Item $devenvPath).VersionInfo.FileVersion
                        Write-Host "  üîπ VS $ver instalado: $fileVersion"
                        if ($fileVersion -lt "17.4.21" -or ($fileVersion -ge "17.6.0" -and $fileVersion -lt "17.6.17") -or ($fileVersion -ge "17.8.0" -and $fileVersion -lt "17.8.12")) {
                            Write-Warning "  ‚ö†Ô∏è Visual Studio versi√≥n vulnerable detectada"
                        } else {
                            Write-Host "  ‚úÖ Visual Studio seguro"
                        }
                    }
                }
            }
        }
    } else {
        Write-Host "  ‚ùå Visual Studio 2022 no detectado"
    }
}

# ========================== EJECUCI√ìN ==========================

Write-Host "`nüîé Iniciando detecci√≥n de versiones vulnerables relacionadas con CVE-2024-38081..." -ForegroundColor Cyan

Get-DotNetSdkVersions
Get-DotNetRuntimeVersions
Get-FrameworkVersions
Check-VisualStudio2022

Write-Host "`n‚úÖ Revisi√≥n completada. Aplica actualizaciones si se detectaron versiones vulnerables." -ForegroundColor Green



# ========================== ACTUALIZACI√ìN DE COMPONENTES ==========================

function Update-DotNetComponents {
    Write-Host "`n‚¨ÜÔ∏è Ejecutando pasos sugeridos para actualizar .NET SDKs y runtimes..." -ForegroundColor Yellow

    $dotnetDownload = "https://dotnet.microsoft.com/en-us/download/dotnet"
    $vsDownload = "https://visualstudio.microsoft.com/es/downloads/"

    Write-Host "`nüåê Abriendo sitio de descarga de .NET..." -ForegroundColor Cyan
    Start-Process $dotnetDownload

    Write-Host "üåê Abriendo sitio de descarga de Visual Studio..." -ForegroundColor Cyan
    Start-Process $vsDownload

    Write-Host "`nüìå Tambi√©n puedes usar el desinstalador oficial de .NET para limpiar versiones viejas:"
    Write-Host "   https://learn.microsoft.com/en-us/dotnet/core/additional-tools/uninstall-tool" -ForegroundColor Cyan

    Write-Host "`nüí° Recomendaci√≥n:"
    Write-Host "   1. Descarga e instala .NET 6.0.32 o superior, .NET 7.0.21 o .NET 8.0.7"
    Write-Host "   2. Actualiza Visual Studio 2022 a:"
    Write-Host "      - 17.4.21 o superior"
    Write-Host "      - 17.6.17 o superior"
    Write-Host "      - 17.8.12 o superior"
    Write-Host "`n‚úÖ Una vez actualizado, vuelve a ejecutar este script para validar." -ForegroundColor Green
}

Update-DotNetComponents



# ========================== ACTUALIZACI√ìN AUTOM√ÅTICA DE .NET ==========================

function Install-SecureDotNet {
    Write-Host "`n‚¨áÔ∏è Descargando e instalando versiones seguras de .NET..." -ForegroundColor Yellow

    $Downloads = @(
        @{ Name = ".NET 6.0.32 Runtime"; Url = "https://download.visualstudio.microsoft.com/download/pr/789b4eaa-0062-49e7-88b0-c77de1c3aa8e/8e97cb86fba7c30173c21b9b9187ab84/dotnet-runtime-6.0.32-win-x64.exe" },
        @{ Name = ".NET 6.0.32 SDK";     Url = "https://download.visualstudio.microsoft.com/download/pr/8c727933-4c3d-4fd1-b9c7-d5f6f7a82a9a/02c7a64f32e7bb3cc87a593d6a10e8be/dotnet-sdk-6.0.32-win-x64.exe" },
        @{ Name = ".NET 8.0.7 SDK";       Url = "https://download.visualstudio.microsoft.com/download/pr/68d04dd9-97da-4b39-ae3b-1ccce2b29dc6/66f7cb303b0dc99a68da3d6e04ae878f/dotnet-sdk-8.0.7-win-x64.exe" }
    )

    foreach ($item in $Downloads) {
        $InstallerPath = "$env:TEMP\$($item.Name.Replace(' ', '_')).exe"
        Write-Host "‚¨áÔ∏è Descargando $($item.Name)..."
        try {
            Invoke-WebRequest -Uri $item.Url -OutFile $InstallerPath -UseBasicParsing
            Write-Host "‚úÖ Instalando $($item.Name)..."
            Start-Process -FilePath $InstallerPath -ArgumentList "/quiet", "/norestart" -Wait
            Remove-Item $InstallerPath -Force
        }
        catch {
            Write-Warning "‚ùå Error instalando $($item.Name): $($_.Exception.Message)"
        }
    }

    Write-Host "`n‚úÖ Proceso de actualizaci√≥n de .NET finalizado." -ForegroundColor Green
}

Install-SecureDotNet



# ======================= DESINSTALACI√ìN DE VERSIONES VULNERABLES =======================

function Uninstall-VulnerableDotNet {
    Write-Host "`nüßπ Buscando y desinstalando versiones vulnerables de .NET..." -ForegroundColor Yellow

    $vulnerableVersions = @(
        "6.0.0", "6.0.1", "6.0.2", "6.0.3", "6.0.4", "6.0.5", "6.0.6", "6.0.7", "6.0.8", "6.0.9",
        "6.0.10", "6.0.11", "6.0.12", "6.0.13", "6.0.14", "6.0.15", "6.0.16", "6.0.17",
        "6.0.18", "6.0.19", "6.0.20", "6.0.21", "6.0.22", "6.0.23", "6.0.24", "6.0.25",
        "6.0.26", "6.0.27", "6.0.28", "6.0.29", "6.0.30", "6.0.31"
    )

    $installed = Get-WmiObject -Class Win32_Product | Where-Object {
        ($_.Name -like "*Microsoft .NET*") -and ($vulnerableVersions -contains $_.Version)
    }

    foreach ($app in $installed) {
        try {
            Write-Host "‚ùå Desinstalando $($app.Name) $($app.Version)..."
            $app.Uninstall()
            Write-Host "‚úÖ $($app.Name) eliminado correctamente."
        } catch {
            Write-Warning "‚ö†Ô∏è Error al desinstalar $($app.Name): $($_.Exception.Message)"
        }
    }

    Write-Host "`n‚úÖ Finaliz√≥ la desinstalaci√≥n de versiones vulnerables." -ForegroundColor Green
}

Uninstall-VulnerableDotNet

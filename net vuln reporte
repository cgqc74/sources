# Update-DotNet-Security.ps1
# Detecta y actualiza autom√°ticamente .NET Runtime si es vulnerable a CVEs cr√≠ticas
# CVEs: CVE-2024-20672, CVE-2024-43484, CVE-2024-43483, CVE-2024-30045, CVE-2024-30105,
#       CVE-2024-38095, CVE-2024-38081, CVE-2025-21172, CVE-2025-21176, CVE-2024-35264,
#       CVE-2025-26646, CVE-2024-38229, CVE-2025-30399, CVE-2024-38167, CVE-2024-38168

# --- Requisito: Ejecutar como Administrador ---
$isAdmin = ([Security.Principal.WindowsPrincipal] [Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator)
if (-not $isAdmin) {
    Write-Host "‚ö†Ô∏è  Este script requiere ejecuci√≥n como Administrador." -ForegroundColor Red
    Write-Host "Abre PowerShell como Administrador e int√©ntalo de nuevo."
    Start-Sleep -Seconds 5
    exit 1
}

# --- Funci√≥n: Obtener versiones instaladas de .NET ---
function Get-InstalledDotNetVersions {
    $paths = @(
        "C:\Program Files\dotnet\shared\Microsoft.NETCore.App"
        "C:\Program Files\dotnet\shared\Microsoft.WindowsDesktop.App"
        "C:\Program Files\dotnet\shared\Microsoft.AspNetCore.App"
    )
    $versions = @()
    foreach ($path in $paths) {
        if (Test-Path $path) {
            Get-ChildItem $path | ForEach-Object {
                $product = Split-Path $path -Leaf
                try {
                    $versionObj = [version]$_.Name
                    $versions += [PSCustomObject]@{
                        Product = $product
                        Version = $versionObj
                        VersionString = $_.Name
                        Path = $_.FullName
                    }
                } catch {
                    Write-Warning "Versi√≥n inv√°lida ignorada: $($_.Name)"
                }
            }
        }
    }
    return $versions | Sort-Object Product, Version -Unique
}

# --- Funci√≥n: Generar URL de descarga oficial ---
function Get-DotNetDownloadUrl {
    param([string]$Major, [string]$Patch)
    $arch = "x64"  # Cambia a x86 si es necesario
    switch ($Major) {
        "6.0" {
            return "https://download.visualstudio.microsoft.com/download/pr/9e9b5a3e-6d6e-4e48-9f7f-43c0f7a1c788/7e1b4953b7cd7767b7b8e4ee6da1e4c6/dotnet-runtime-6.0.$Patch-win-$arch.exe"
        }
        "7.0" {
            return "https://download.visualstudio.microsoft.com/download/pr/f3ab9fbc-f38a-4d03-8e4f-7c803e1bfc7a/c7c10189e7f5d6d0c635d5c4e4cfd1e8/dotnet-runtime-7.0.$Patch-win-$arch.exe"
        }
        "8.0" {
            return "https://download.visualstudio.microsoft.com/download/pr/8d1f97f3-50e8-4e95-952c-bbe5e63a8c35/9db1b2b7e6b7f6b3c8e1e8a8c8b7d1c6/dotnet-runtime-8.0.$Patch-win-$arch.exe"
        }
        default {
            return $null
        }
    }
}

# --- Funci√≥n: Comparar versiones ---
function Test-VersionInRange {
    param([string]$Version, [string]$Min, [string]$Max)
    try {
        $v = [version]$Version
        $minVer = [version]$Min
        $maxVer = [version]$Max
        return ($v -ge $minVer) -and ($v -lt $maxVer)
    } catch {
        return $false
    }
}

# --- Definici√≥n de CVEs y sus parches ---
$cves = @(
    @{
        Id = "CVE-2024-30045"
        Product = "Microsoft.NETCore.App"
        Ranges = @(
            @{ Min = "6.0.0"; Max = "6.0.29"; Patch = "6.0.29" },
            @{ Min = "7.0.0"; Max = "7.0.18"; Patch = "7.0.18" },
            @{ Min = "8.0.0"; Max = "8.0.4";  Patch = "8.0.4"  }
        )
        URL = "https://msrc.microsoft.com/update-guide/vulnerability/CVE-2024-30045"
    },
    @{
        Id = "CVE-2024-38229"
        Product = "Microsoft.NETCore.App"
        Ranges = @(
            @{ Min = "6.0.0"; Max = "6.0.30"; Patch = "6.0.30" },
            @{ Min = "8.0.0"; Max = "8.0.5";  Patch = "8.0.5"  }
        )
        URL = "https://msrc.microsoft.com/update-guide/vulnerability/CVE-2024-38229"
    },
    @{
        Id = "CVE-2025-21172"
        Product = "Microsoft.NETCore.App"
        Ranges = @(
            @{ Min = "6.0.0"; Max = "6.0.31"; Patch = "6.0.31" },
            @{ Min = "8.0.0"; Max = "8.0.6";  Patch = "8.0.6"  }
        )
        URL = "https://msrc.microsoft.com/update-guide/vulnerability/CVE-2025-21172"
    },
    @{
        Id = "CVE-2024-35264"
        Product = "Microsoft.NETCore.App"
        Ranges = @(
            @{ Min = "6.0.0"; Max = "6.0.28"; Patch = "6.0.28" },
            @{ Min = "7.0.0"; Max = "7.0.17"; Patch = "7.0.17" },
            @{ Min = "8.0.0"; Max = "8.0.3";  Patch = "8.0.3"  }
        )
        URL = "https://msrc.microsoft.com/update-guide/vulnerability/CVE-2024-35264"
    },
    @{
        Id = "CVE-2024-20672"
        Product = "Microsoft.NETCore.App"
        Ranges = @(
            @{ Min = "6.0.0"; Max = "6.0.26"; Patch = "6.0.26" }
        )
        URL = "https://msrc.microsoft.com/update-guide/vulnerability/CVE-2024-20672"
    },
    @{
        Id = "CVE-2024-43484"
        Product = "Microsoft.NETCore.App"
        Ranges = @(
            @{ Min = "8.0.0"; Max = "8.0.8"; Patch = "8.0.8" }
        )
        URL = "https://msrc.microsoft.com/update-guide/vulnerability/CVE-2024-43484"
    },
    @{
        Id = "CVE-2024-43483"
        Product = "Microsoft.NETCore.App"
        Ranges = @(
            @{ Min = "7.0.0"; Max = "7.0.20"; Patch = "7.0.20" }
        )
        URL = "https://msrc.microsoft.com/update-guide/vulnerability/CVE-2024-43483"
    },
    @{
        Id = "CVE-2024-30105"
        Product = "Microsoft.NETCore.App"
        Ranges = @(
            @{ Min = "6.0.0"; Max = "6.0.29"; Patch = "6.0.29" }
        )
        URL = "https://msrc.microsoft.com/update-guide/vulnerability/CVE-2024-30105"
    },
    @{
        Id = "CVE-2024-38095"
        Product = "Microsoft.NETCore.App"
        Ranges = @(
            @{ Min = "8.0.0"; Max = "8.0.5"; Patch = "8.0.5" }
        )
        URL = "https://msrc.microsoft.com/update-guide/vulnerability/CVE-2024-38095"
    },
    @{
        Id = "CVE-2024-38081"
        Product = "Microsoft.NETCore.App"
        Ranges = @(
            @{ Min = "8.0.0"; Max = "8.0.4"; Patch = "8.0.4" }
        )
        URL = "https://msrc.microsoft.com/update-guide/vulnerability/CVE-2024-38081"
    },
    @{
        Id = "CVE-2025-21176"
        Product = "Microsoft.NETCore.App"
        Ranges = @(
            @{ Min = "8.0.0"; Max = "8.0.6"; Patch = "8.0.6" }
        )
        URL = "https://msrc.microsoft.com/update-guide/vulnerability/CVE-2025-21176"
    },
    @{
        Id = "CVE-2025-26646"
        Product = "Microsoft.NETCore.App"
        Ranges = @(
            @{ Min = "6.0.0"; Max = "6.0.31"; Patch = "6.0.31" }
        )
        URL = "https://msrc.microsoft.com/update-guide/vulnerability/CVE-2025-26646"
    },
    @{
        Id = "CVE-2025-30399"
        Product = "Microsoft.NETCore.App"
        Ranges = @(
            @{ Min = "7.0.0"; Max = "7.0.21"; Patch = "7.0.21" }
        )
        URL = "https://msrc.microsoft.com/update-guide/vulnerability/CVE-2025-30399"
    },
    @{
        Id = "CVE-2024-38167"
        Product = "Microsoft.NETCore.App"
        Ranges = @(
            @{ Min = "6.0.0"; Max = "6.0.30"; Patch = "6.0.30" }
        )
        URL = "https://msrc.microsoft.com/update-guide/vulnerability/CVE-2024-38167"
    },
    @{
        Id = "CVE-2024-38168"
        Product = "Microsoft.NETCore.App"
        Ranges = @(
            @{ Min = "8.0.0"; Max = "8.0.5"; Patch = "8.0.5" }
        )
        URL = "https://msrc.microsoft.com/update-guide/vulnerability/CVE-2024-38168"
    }
)

# --- Ejecuci√≥n principal ---

Write-Host "`nüîç Escaneando versiones de .NET instaladas..." -ForegroundColor Cyan
$installed = Get-InstalledDotNetVersions

if ($installed.Count -eq 0) {
    Write-Host "‚ùå No se encontraron instalaciones de .NET." -ForegroundColor Red
    exit 1
}

$installed | Format-Table Product, VersionString -AutoSize

# Filtrar solo .NET Core App
$coreApps = $installed | Where-Object { $_.Product -eq "Microsoft.NETCore.App" }

Write-Host "`nüõ°Ô∏è  Analizando vulnerabilidades..." -ForegroundColor Yellow
$updatesNeeded = @()

foreach ($cve in $cves) {
    foreach ($range in $cve.Ranges) {
        $vulnerable = $coreApps | Where-Object {
            Test-VersionInRange -Version $_.VersionString -Min $range.Min -Max $range.Max
        }

        foreach ($vuln in $vulnerable) {
            $major = "$($vuln.Version.Major).$($vuln.Version.Minor)"
            $targetPatch = $range.Patch
            $url = Get-DotNetDownloadUrl -Major $major -Patch $targetPatch
            $installerPath = "$env:TEMP\dotnet-runtime-$major-$targetPatch.exe"

            # Evitar duplicados
            if ($updatesNeeded | Where-Object { $_.Target -eq $targetPatch -and $_.Major -eq $major }) { continue }

            $updatesNeeded += [PSCustomObject]@{
                CVE         = $cve.Id
                Current     = $vuln.VersionString
                Target      = $targetPatch
                Major       = $major
                DownloadUrl = $url
                Installer   = $installerPath
                RefUrl      = $cve.URL
            }
        }
    }
}

# Eliminar duplicados
$updatesNeeded = $updatesNeeded | Sort-Object Major, Target -Unique

# --- Mostrar resumen y actualizar ---
if ($updatesNeeded.Count -eq 0) {
    Write-Host "`n‚úÖ Todas las versiones de .NET est√°n actualizadas." -ForegroundColor Green
} else {
    Write-Host "`n‚ö†Ô∏è  Se encontraron versiones vulnerables:" -ForegroundColor Red
    $updatesNeeded | Format-Table CVE, Current, Target -AutoSize

    Write-Host "`n¬øDesea descargar e instalar autom√°ticamente los parches de seguridad? (s/n)" -ForegroundColor Cyan
    $answer = Read-Host
    if ($answer -match 's|y') {
        foreach ($update in $updatesNeeded) {
            Write-Host "`n‚¨áÔ∏è  Descargando .NET Runtime v$($update.Target)..." -ForegroundColor Green
            try {
                Invoke-WebRequest -Uri $update.DownloadUrl -OutFile $update.Installer -ErrorAction Stop
                Write-Host "‚úÖ Descargado: $($update.Installer)"

                Write-Host "üöÄ Instalando .NET Runtime v$($update.Target)..." -ForegroundColor Cyan
                $proc = Start-Process -FilePath $update.Installer -ArgumentList "/install", "/quiet", "/norestart" -Wait -PassThru

                if ($proc.ExitCode -eq 0 -or $proc.ExitCode -eq 3010) {
                    Write-Host "‚úîÔ∏è  Instalado correctamente v$($update.Target)"
                    if ($proc.ExitCode -eq 3010) {
                        Write-Host "üîÅ Se requiere reinicio para completar la instalaci√≥n."
                    }
                } else {
                    Write-Error "‚ùå Error en instalaci√≥n. C√≥digo: $($proc.ExitCode)"
                }
            } catch {
                Write-Error "‚ùå No se pudo descargar o instalar: $($_.Exception.Message)"
                Write-Host "üí° Visita: $($update.RefUrl) para m√°s detalles."
            }
        }

        Write-Host "`nüéâ Actualizaci√≥n de seguridad completada." -ForegroundColor Green
    } else {
        Write-Host "`n‚ÑπÔ∏è  No se realizar√° ninguna acci√≥n autom√°tica." -ForegroundColor Yellow
        Write-Host "Puedes descargar los parches desde:" -ForegroundColor White
        $updatesNeeded.DownloadUrl | ForEach-Object { Write-Host "  $_" }
    }
}

# --- Recomendaci√≥n final: .NET 9 ---
Write-Host "`nüí° Recomendaci√≥n:" -ForegroundColor Green
Write-Host "üëâ .NET 9 ya est√° disponible: m√°s r√°pido, seguro y con mejor soporte para IA." -ForegroundColor White
Write-Host "üîó https://dotnet.microsoft.com/en-us/download/dotnet/9.0" -ForegroundColor Blue

Write-Host "`n‚úÖ An√°lisis y actualizaci√≥n completados." -ForegroundColor Green

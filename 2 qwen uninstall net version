# Uninstall-DotNetVersion.ps1
# Script para desinstalar una versi√≥n espec√≠fica de .NET Core / .NET Runtime en Windows
# Basado en: https://dotnet.microsoft.com y an√°lisis de CVEs

# --- Requisitos: Ejecutar como Administrador ---
$isAdmin = ([Security.Principal.WindowsPrincipal] [Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator)
if (-not $isAdmin) {
    Write-Host "‚ö†Ô∏è  Este script requiere ejecuci√≥n como Administrador." -ForegroundColor Red
    Write-Host "Abre PowerShell como Administrador e int√©ntalo de nuevo."
    Start-Sleep -Seconds 5
    exit 1
}

# --- Funci√≥n: Obtener todas las versiones instaladas de .NET Core/Runtime ---
function Get-InstalledDotNetVersions {
    $paths = @(
        "C:\Program Files\dotnet\shared\Microsoft.NETCore.App"
        "C:\Program Files\dotnet\shared\Microsoft.WindowsDesktop.App"
        "C:\Program Files\dotnet\shared\Microsoft.AspNetCore.App"
    )
    $versions = @()
    foreach ($path in $paths) {
        if (Test-Path $path) {
            Get-ChildItem $path | ForEach-Object {
                $product = Split-Path $path -Leaf
                try {
                    $versionObj = [version]$_.Name
                    $versions += [PSCustomObject]@{
                        Product = $product
                        Version = $versionObj
                        VersionString = $_.Name
                        Path = $_.FullName
                    }
                } catch {
                    Write-Warning "Versi√≥n inv√°lida ignorada: $($_.Name)"
                }
            }
        }
    }
    return $versions | Sort-Object Product, Version -Unique
}

# --- Funci√≥n: Buscar paquetes .NET instalados en el registro (MSI) ---
function Find-DotNetMSIPackages {
    param([string]$Version)
    $versionPattern = "^Microsoft .*(\b$Version)\b"
    $uninstallKey = "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall"
    $packages = Get-ChildItem -Path $uninstallKey -ErrorAction SilentlyContinue | ForEach-Object {
        $displayName = (Get-ItemProperty -Path $_.PSPath).DisplayName
        if ($displayName -match $versionPattern) {
            $displayName = $displayName -replace "\s+", " "
            [PSCustomObject]@{
                DisplayName = $displayName
                Version     = $Version
                Key         = $_.PSPath
                PackageCode = $_.PSChildName
            }
        }
    }
    return $packages
}

# --- Funci√≥n: Desinstalar usando MsiExec ---
function Uninstall-PackageByCode {
    param([string]$PackageCode)
    Write-Host "üöÄ Desinstalando paquete MSI: $PackageCode..." -ForegroundColor Cyan
    try {
        $proc = Start-Process "msiexec.exe" -ArgumentList "/x", "$PackageCode", "/quiet", "/norestart" -Wait -PassThru
        if ($proc.ExitCode -eq 0 -or $proc.ExitCode -eq 1605) {
            if ($proc.ExitCode -eq 1605) {
                Write-Host "‚ÑπÔ∏è  El paquete ya estaba desinstalado (C√≥digo: 1605)." -ForegroundColor Yellow
            } else {
                Write-Host "‚úÖ Desinstalado correctamente." -ForegroundColor Green
            }
            return $true
        } else {
            Write-Error "‚ùå Error al desinstalar. C√≥digo de salida: $($proc.ExitCode)"
            return $false
        }
    } catch {
        Write-Error "‚ùå No se pudo ejecutar la desinstalaci√≥n: $($_.Exception.Message)"
        return $false
    }
}

# --- Ejecuci√≥n principal ---

Write-Host "`nüîç Buscando versiones instaladas de .NET..." -ForegroundColor Cyan
$installed = Get-InstalledDotNetVersions

if ($installed.Count -eq 0) {
    Write-Host "‚ùå No se encontraron instalaciones de .NET." -ForegroundColor Red
    exit 0
}

$installed | Format-Table Product, VersionString -AutoSize

Write-Host "`nüìù Ingresa la versi√≥n exacta que deseas desinstalar (ej: 6.0.25):" -ForegroundColor Yellow
$targetVersion = Read-Host "Versi√≥n"

$match = $installed | Where-Object { $_.VersionString -eq $targetVersion }

if (-not $match) {
    Write-Host "‚ùå No se encontr√≥ la versi√≥n '$targetVersion' instalada." -ForegroundColor Red
    exit 1
}

Write-Host "`n‚ö†Ô∏è  Se encontr√≥: $($match.Product) v$($match.VersionString)" -ForegroundColor Yellow

Write-Host "`n¬øEst√°s seguro de que deseas desinstalar esta versi√≥n? (s/n)" -ForegroundColor Red
$confirm = Read-Host
if ($confirm -notmatch 's|y') {
    Write-Host "‚ùå Operaci√≥n cancelada." -ForegroundColor Green
    exit 0
}

# Buscar paquetes MSI asociados
Write-Host "`nüîé Buscando paquetes MSI para v$targetVersion..." -ForegroundColor Cyan
$packages = Find-DotNetMSIPackages -Version $targetVersion

if ($packages.Count -eq 0) {
    Write-Host "‚ùå No se encontr√≥ ning√∫n paquete MSI para la versi√≥n '$targetVersion'." -ForegroundColor Red
    Write-Host "Puede que ya haya sido desinstalado o que no use MSI (poco com√∫n)." -ForegroundColor Yellow
    exit 1
}

$packages | Format-Table DisplayName, Version -AutoSize

Write-Host "`n¬øDeseas proceder con la desinstalaci√≥n de estos paquetes? (s/n)" -ForegroundColor Magenta
$proceed = Read-Host
if ($proceed -notmatch 's|y') {
    Write-Host "Operaci√≥n cancelada." -ForegroundColor Green
    exit 0
}

# Desinstalar cada paquete encontrado
foreach ($pkg in $packages) {
    Uninstall-PackageByCode -PackageCode $pkg.PackageCode
}

# Verificar si a√∫n existe la carpeta
$dotnetPath = "C:\Program Files\dotnet"
$sharedPath = "$dotnetPath\shared"
$orphanedFolders = @()

foreach ($product in @("Microsoft.NETCore.App", "Microsoft.WindowsDesktop.App", "Microsoft.AspNetCore.App")) {
    $path = "$sharedPath\$product\$targetVersion"
    if (Test-Path $path) {
        $orphanedFolders += $path
    }
}

if ($orphanedFolders.Count -gt 0) {
    Write-Host "`nüìÅ Carpetas hu√©rfanas encontradas (puedes eliminarlas manualmente):" -ForegroundColor Yellow
    $orphanedFolders | ForEach-Object { Write-Host "  $_" }

    Write-Host "`n¬øEliminar estas carpetas ahora? (s/n)" -ForegroundColor Cyan
    $delete = Read-Host
    if ($delete -match 's|y') {
        $orphanedFolders | Remove-Item -Recurse -Force -ErrorAction SilentlyContinue
        Write-Host "üóëÔ∏è  Carpetas eliminadas." -ForegroundColor Green
    }
}

Write-Host "`n‚úÖ Desinstalaci√≥n completada para .NET v$targetVersion." -ForegroundColor Green
Write-Host "üí° Recuerda reiniciar los servicios o aplicaciones afectadas si es necesario." -ForegroundColor White

# Detectar versiones instaladas de .NET y compararlas con la base de datos oficial de vulnerabilidades de Microsoft

Function Get-NetFrameworkVersions {
    $frameworks = Get-ChildItem 'HKLM:\SOFTWARE\Microsoft\NET Framework Setup\NDP' -Recurse |
        Get-ItemProperty -Name Version -ErrorAction SilentlyContinue |
        Where-Object { $_.Version -match '^\d+\.\d+' } |
        Select-Object -Property PSChildName, Version
    return $frameworks
}

Function Get-NetCoreVersions {
    $corePath = "C:\Program Files\dotnet\shared\Microsoft.NETCore.App"
    $coreVersions = @()
    if (Test-Path $corePath) {
        $coreVersions = Get-ChildItem $corePath | Select-Object -ExpandProperty Name
    }
    return $coreVersions
}

Function Get-Net5PlusVersions {
    $netPath = "C:\Program Files\dotnet\shared"
    $net5Versions = @()
    if (Test-Path $netPath) {
        Get-ChildItem $netPath | Where-Object { $_.Name -like "Microsoft.NETCore.App" -or $_.Name -like "Microsoft.WindowsDesktop.App" } | ForEach-Object {
            $sdkPath = $_.FullName
            $net5Versions += Get-ChildItem $sdkPath | Select-Object -ExpandProperty Name
        }
    }
    return $net5Versions
}

Function Compare-VersionRange {
    param($version, $range)
    # El rango puede ser ">=x.y.z <a.b.c", etc.
    $regex = [regex] '(>=|>|<=|<|=)\s*([\d\.]+)'
    $parts = $range -split '\s+'
    $result = $true
    foreach ($part in $parts) {
        if ($regex.IsMatch($part)) {
            $op, $ver = $regex.Match($part).Groups[1,2].Value
            switch ($op) {
                '>=' { if (-not ([version]$version -ge [version]$ver)) { $result = $false } }
                '<=' { if (-not ([version]$version -le [version]$ver)) { $result = $false } }
                '>'  { if (-not ([version]$version -gt [version]$ver)) { $result = $false } }
                '<'  { if (-not ([version]$version -lt [version]$ver)) { $result = $false } }
                '='  { if (-not ([version]$version -eq [version]$ver)) { $result = $false } }
            }
        }
    }
    return $result
}

Write-Host "Buscando versiones instaladas de .NET..." -ForegroundColor Cyan

$frameworks = Get-NetFrameworkVersions
$coreVersions = Get-NetCoreVersions
$net5PlusVersions = Get-Net5PlusVersions

Write-Host "`nResumen de versiones instaladas:`n" -ForegroundColor Green
Write-Host "---- .NET Framework ----"
$frameworks | ForEach-Object { Write-Host "$($_.PSChildName) - $($_.Version)" }
Write-Host "`n---- .NET Core / .NET 5+ ----"
($coreVersions + $net5PlusVersions | Sort-Object -Unique) | ForEach-Object { Write-Host "$_" }

# Descargar base de datos oficial de vulnerabilidades de Microsoft
$msftCveFeed = "https://raw.githubusercontent.com/dotnet/core/main/release-notes/known-issues/index.json"
try {
    $cveJson = Invoke-WebRequest $msftCveFeed -UseBasicParsing -ErrorAction Stop | Select-Object -ExpandProperty Content | ConvertFrom-Json
} catch {
    Write-Host "No se pudo descargar la base de datos oficial de vulnerabilidades de Microsoft. Verifica tu conexión a Internet." -ForegroundColor Red
    exit 1
}

Write-Host "`nAnalizando vulnerabilidades conocidas según Microsoft (`.NET Core Known Issues`) ..." -ForegroundColor Yellow

function Test-Vulnerabilities {
    param($version, $productName, $cveJson)
    $vulnerable = $false
    $vulnDetails = @()

    foreach ($issue in $cveJson.issues) {
        foreach ($affected in $issue.affected) {
            $affectedProduct = $affected.product
            $affectedRanges = $affected.ranges
            if ($affectedProduct -like "*$productName*") {
                foreach ($range in $affectedRanges) {
                    if ($range.type -eq "ECOSYSTEM") {
                        foreach ($event in $range.events) {
                            if ($event.introduced) { $introduced = $event.introduced }
                            if ($event.fixed) { $fixed = $event.fixed }
                        }
                        # Verificación simplificada: Si la versión instalada está entre "introduced" y "fixed", es vulnerable
                        if ($introduced -and $fixed) {
                            if ([version]$version -ge [version]$introduced -and [version]$version -lt [version]$fixed) {
                                $vulnerable = $true
                                $vulnDetails += $issue
                            }
                        } elseif ($introduced) {
                            if ([version]$version -ge [version]$introduced) {
                                $vulnerable = $true
                                $vulnDetails += $issue
                            }
                        }
                    }
                }
            }
        }
    }
    return @{vulnerable=$vulnerable; details=$vulnDetails}
}

Write-Host "`n---- RESULTADOS DE VULNERABILIDAD ----" -ForegroundColor Magenta

# Revisar .NET Core y .NET 5+ (los que están en la base oficial)
foreach ($ver in ($coreVersions + $net5PlusVersions | Sort-Object -Unique)) {
    $result = Test-Vulnerabilities $ver "Microsoft.NETCore.App" $cveJson

    if ($result.vulnerable) {
        Write-Host "VULNERABLE: Microsoft.NETCore.App $ver" -ForegroundColor Red
        foreach ($det in $result.details) {
            Write-Host " - CVE: $($det.cve) - $($det.summary)"
        }
    } else {
        Write-Host "Seguro/No reportado: Microsoft.NETCore.App $ver" -ForegroundColor Green
    }
}

# Revisar .NET Framework (no suele estar en el feed oficial, pero se muestra para referencia)
foreach ($fw in $frameworks) {
    Write-Host "Nota: La base oficial de Microsoft no incluye vulnerabilidades para .NET Framework $($fw.Version). Revisa manualmente en https://msrc.microsoft.com/update-guide/."
}

Write-Host "`nAnálisis completado.`n"
Write-Host "Para más detalles, consulta:"
Write-Host " - https://github.com/dotnet/core/blob/main/release-notes/known-issues/index.md"
Write-Host " - https://msrc.microsoft.com/update-guide/"

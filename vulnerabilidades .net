
# Check-and-Update-DotNet.ps1
# Detecta todas las versiones de .NET instaladas y aplica actualizaciones si es necesario
# CVEs: CVE-2024-30045, CVE-2024-38229, CVE-2025-21172, CVE-2024-35264
# Fuente oficial: https://dotnet.microsoft.com/download/dotnet

# --- Ejecutar como Administrador ---
$isAdmin = ([Security.Principal.WindowsPrincipal] [Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator)
if (-not $isAdmin) {
    Write-Host "‚ö†Ô∏è  Este script requiere ejecuci√≥n como Administrador." -ForegroundColor Red
    Write-Host "Abre PowerShell como Administrador e int√©ntalo de nuevo."
    Start-Sleep -Seconds 5
    exit 1
}

# --- Log file ---
$logFile = "$env:TEMP\DotNet-Update-$(Get-Date -Format 'yyyyMMdd').log"
function Write-Log {
    param([string]$Message, [string]$Level = "INFO")
    $time = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
    "[$time][$Level] $Message" | Out-File -FilePath $logFile -Append -Encoding UTF8
    switch ($Level) {
        "ERROR" { Write-Host "‚ùå $Message" -ForegroundColor Red }
        "WARN"  { Write-Host "‚ö†Ô∏è  $Message" -ForegroundColor Yellow }
        "INFO"  { Write-Host "üîç $Message" }
        "GOOD"  { Write-Host "‚úÖ $Message" -ForegroundColor Green }
        "FOUND" { Write-Host "üö® $Message" -ForegroundColor Magenta }
    }
}

Write-Log "Iniciando detecci√≥n de .NET instalado..."

# --- Funci√≥n: Obtener versiones instaladas ---
function Get-InstalledDotNetVersions {
    $paths = @(
        "C:\Program Files\dotnet\shared\Microsoft.NETCore.App"
        "C:\Program Files\dotnet\shared\Microsoft.WindowsDesktop.App"
        "C:\Program Files\dotnet\shared\Microsoft.AspNetCore.App"
    )
    $versions = @()
    foreach ($path in $paths) {
        if (Test-Path $path -ErrorAction SilentlyContinue) {
            Get-ChildItem $path | Where-Object { $_.PSIsContainer } | ForEach-Object {
                try {
                    $versionObj = [version]$_.Name
                    $versions += [PSCustomObject]@{
                        Product       = Split-Path $path -Leaf
                        Version       = $versionObj
                        VersionString = $_.Name
                        Path          = $_.FullName
                    }
                } catch {
                    Write-Log "Versi√≥n inv√°lida ignorada: $($_.Name)" "WARN"
                }
            }
        } else {
            Write-Log "Ruta no encontrada: $path" "INFO"
        }
    }
    return $versions | Sort-Object Product, Version -Unique
}

# --- Funci√≥n: Generar URL de descarga oficial ---
function Get-DotNetDownloadUrl {
    param([version]$Version)
    $arch = "x64"
    $majorMinor = "$($Version.Major).$($Version.Minor)"
    switch ($majorMinor) {

        "3.0 SDK" { return "https://download.visualstudio.microsoft.com/download/pr/b70ad520-0e60-43f5-aee2-d3965094a40d/667c122b3736dcbfa1beff08092dbfc3/dotnet-sdk-3.1.426-win-x64.exe" }

        "3.0 NETCORE" { return "https://download.visualstudio.microsoft.com/download/pr/98910750-2644-472c-ab2b-17f315ccb953/c2a4c223ee11e2eec7d13744e7a45547/aspnetcore-runtime-3.1.32-win-x64.exe" }

        "3.0 DESKTOP" { return "https://download.visualstudio.microsoft.com/download/pr/b92958c6-ae36-4efa-aafe-569fced953a5/1654639ef3b20eb576174c1cc200f33a/windowsdesktop-runtime-3.1.32-win-x64.exe" }

        "5.0 SDK" { return "https://download.visualstudio.microsoft.com/download/pr/14ccbee3-e812-4068-af47-1631444310d1/3b8da657b99d28f1ae754294c9a8f426/dotnet-sdk-5.0.408-win-x64.exe" }

        "6.0 RUNTIME" { return "https://download.visualstudio.microsoft.com/download/pr/1a5fc50a-9222-4f33-8f73-3c78485a55c7/1cb55899b68fcb9d98d206ba56f28b66/dotnet-runtime-6.0.36-win-x64.exe" }

        "7.0 RUNTIME" { return "https://download.visualstudio.microsoft.com/download/pr/be7eaed0-4e32-472b-b53e-b08ac3433a22/fc99a5977c57cbfb93b4afb401953818/dotnet-runtime-7.0.20-win-x64.exe" }

        "8.0 RUNTIME" { return "https://builds.dotnet.microsoft.com/dotnet/Runtime/8.0.19/dotnet-runtime-8.0.19-win-x64.exe" }

        "8. NET CORE" { return "https://builds.dotnet.microsoft.com/dotnet/aspnetcore/Runtime/8.0.19/aspnetcore-runtime-8.0.19-win-x64.exe" }

        "8. NET CORE" { return "https://builds.dotnet.microsoft.com/dotnet/WindowsDesktop/8.0.19/windowsdesktop-runtime-8.0.19-win-x64.exe" }

        "8. NET DESKTOP" { return "https://builds.dotnet.microsoft.com/dotnet/WindowsDesktop/8.0.19/windowsdesktop-runtime-8.0.19-win-x64.exe" }

        "9.0 RUNTIME" { return "https://builds.dotnet.microsoft.com/dotnet/Runtime/9.0.8/dotnet-runtime-9.0.8-win-x64.exe" }

        "9.0 SDK" { return "https://builds.dotnet.microsoft.com/dotnet/Sdk/9.0.304/dotnet-sdk-9.0.304-win-x64.exe" }

        "9.0 NET CORE" { return "https://builds.dotnet.microsoft.com/dotnet/aspnetcore/Runtime/9.0.8/aspnetcore-runtime-9.0.8-win-x64.exe" }

        default { return $null }
    }
}

# --- Funci√≥n: Comparar versiones ---
function Test-VersionInRange {
    param([version]$Version, [version]$Min, [version]$Max)
    return ($Version -ge $Min) -and ($Version -lt $Max)
}

# --- Definici√≥n de CVEs y parches ---
$cves = @(
    @{
        Id = "CVE-2024-30045"
        Ranges = @(
            @{ Min = "6.0.0"; Max = "6.0.36"; Patch = "6.0.36" },
            @{ Min = "7.0.0"; Max = "7.0.20"; Patch = "7.0.20" },
            @{ Min = "8.0.0"; Max = "8.0.19";  Patch = "8.0.19"  }
        )
    },
    @{
        Id = "CVE-2024-38229"
        Ranges = @(
            @{ Min = "6.0.0"; Max = "6.0.36"; Patch = "6.0.36" },
            @{ Min = "8.0.0"; Max = "8.0.19";  Patch = "8.0.19"  }
        )
    },
    @{
        Id = "CVE-2025-21172"
        Ranges = @(
            @{ Min = "6.0.0"; Max = "6.0.36"; Patch = "6.0.36" },
            @{ Min = "8.0.0"; Max = "8.0.19";  Patch = "8.0.19"  }
        )
    },
    @{
        Id = "CVE-2024-35264"
        Ranges = @(
            @{ Min = "6.0.0"; Max = "6.0.36"; Patch = "6.0.36" },
            @{ Min = "7.0.0"; Max = "7.0.20"; Patch = "7.0.20" },
            @{ Min = "8.0.0"; Max = "8.0.19";  Patch = "8.0.19"  }
        )
    }
)

# --- Escanear versiones instaladas ---
Write-Log "Escaneando versiones de .NET instaladas..."
$installed = Get-InstalledDotNetVersions

if ($installed.Count -eq 0) {
    Write-Log "No se encontraron instalaciones de .NET." "ERROR"
    exit 1
}

$installed | Format-Table Product, VersionString -AutoSize

# Filtrar solo .NET Core App
$coreApps = $installed | Where-Object { $_.Product -eq "Microsoft.NETCore.App" }

Write-Log "Analizando vulnerabilidades..."
$updates = @()

foreach ($cve in $cves) {
    foreach ($range in $cve.Ranges) {
        $minVer = [version]$range.Min
        $maxVer = [version]$range.Max
        $patchVer = [version]$range.Patch

        $vulnerable = $coreApps | Where-Object {
            Test-VersionInRange -Version $_.Version -Min $minVer -Max $maxVer
        }

        foreach ($vuln in $vulnerable) {
            $downloadUrl = Get-DotNetDownloadUrl -Version $patchVer
            $installerPath = "$env:TEMP\dotnet-runtime-$($range.Patch)-win-x64.exe"

            $updates += [PSCustomObject]@{
                CVE         = $cve.Id
                Current     = $vuln.VersionString
                Target      = $range.Patch
                TargetObj   = $patchVer
                DownloadUrl = $downloadUrl
                Installer   = $installerPath
            }
        }
    }
}

# Eliminar duplicados
$updates = $updates | Sort-Object TargetObj -Unique

# --- Mostrar resumen y aplicar parches ---
if ($updates.Count -eq 0) {
    Write-Log "Todas las versiones de .NET est√°n actualizadas." "GOOD"
} else {
    Write-Log "Se requieren actualizaciones de seguridad:" "FOUND"
    $updates | Format-Table CVE, Current, Target -AutoSize

    Write-Host "`n¬øDesea aplicar los parches de seguridad? (s/n)" -ForegroundColor Cyan
    $apply = Read-Host
    if ($apply -match '^(s|y|yes|si)$') {
        foreach ($update in $updates) {
            Write-Log "Descargando .NET Runtime v$($update.Target)..."
            try {
                if (-not $update.DownloadUrl) {
                    Write-Log "No se pudo generar la URL de descarga para v$($update.Target)" "ERROR"
                    continue
                }

                Invoke-WebRequest -Uri $update.DownloadUrl -OutFile $update.Installer -ErrorAction Stop
                Write-Log "Descargado: $($update.Installer)"

                Write-Log "Instalando... (modo silencioso)"
                $proc = Start-Process -FilePath $update.Installer -ArgumentList "/install", "/quiet", "/norestart" -Wait -PassThru

                if ($proc.ExitCode -in @(0, 3010)) {
                    Write-Log "Instalado correctamente v$($update.Target)" "GOOD"
                } else {
                    Write-Log "Fallo en instalaci√≥n. C√≥digo: $($proc.ExitCode)" "ERROR"
                }
            } catch {
                Write-Log "Error al descargar o instalar: $($_.Exception.Message)" "ERROR"
            }
        }
    }
}

# --- Recomendaci√≥n: Actualizar a .NET 9 ---
Write-Host "`nüí° ¬øDesea actualizar a .NET 9, la versi√≥n m√°s reciente y segura?" -ForegroundColor Green
Write-Host "üëâ .NET 9 es m√°s r√°pido, seguro y con mejor soporte para IA y Cloud." -ForegroundColor White
Write-Host "üîó Disponible en: https://dotnet.microsoft.com/en-us/download/dotnet/9.0" -ForegroundColor Blue

$upgradeTo9 = Read-Host "`n¬øDescargar e instalar .NET 9 Runtime? (s/n)"
if ($upgradeTo9 -match '^(s|y|yes|si)$') {
    $dotnet9Url = "https://download.visualstudio.microsoft.com/download/pr/99bd07c2-c95c-44dc-9d47-36d3b18df240/bdf26c62f69c1b783687c1dce83ccf7a/dotnet-runtime-9.0.0-win-x64.exe"
    $installer9 = "$env:TEMP\dotnet-runtime-9.0.0-win-x64.exe"

    Write-Log "Descargando .NET 9 Runtime..."
    try {
        Invoke-WebRequest -Uri $dotnet9Url -OutFile $installer9 -ErrorAction Stop
        Write-Log "Descargado: $installer9"

        Write-Log "Instalando .NET 9..."
        $proc = Start-Process -FilePath $installer9 -ArgumentList "/install", "/quiet", "/norestart" -Wait -PassThru

        if ($proc.ExitCode -in @(0, 3010)) {
            Write-Log "¬°.NET 9 instalado correctamente!" "GOOD"
        } else {
            Write-Log "Error al instalar .NET 9. C√≥digo: $($proc.ExitCode)" "ERROR"
        }
    } catch {
        Write-Log "No se pudo descargar .NET 9: $($_.Exception.Message)" "ERROR"
        Write-Host "üí° Visita: https://dotnet.microsoft.com/en-us/download/dotnet/9.0 para descargar manualmente."
    }
}

Write-Host "`n‚úÖ An√°lisis y actualizaci√≥n completados." -ForegroundColor Green
Write-Host "‚û°Ô∏è  Reinicia los servicios o el servidor si es necesario." -ForegroundColor Yellow
Write-Host "üìÑ Informe guardado en: $logFile" -ForegroundColor Blue

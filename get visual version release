# Get-VisualStudioVersion.ps1
# Obtiene todas las versiones de Visual Studio instaladas
# Autor: Qwen

# Verificar si el m√≥dulo VSSetup est√° disponible
if (-not (Get-Module -ListAvailable -Name VSSetup)) {
    Write-Host "‚ö†Ô∏è  El m√≥dulo VSSetup no est√° instalado. Instalando..." -ForegroundColor Yellow
    try {
        Install-Module VSSetup -Force -Scope CurrentUser
        Import-Module VSSetup
    } catch {
        Write-Error "No se pudo instalar el m√≥dulo VSSetup: $($_.Exception.Message)"
        Write-Host "üí° Ejecuta PowerShell como Administrador."
        exit 1
    }
} else {
    Import-Module VSSetup
}

# Obtener instancias de Visual Studio
$instances = Get-VSSetupInstance -ErrorAction SilentlyContinue

if (-not $instances) {
    Write-Host "‚ùå No se encontr√≥ ninguna instalaci√≥n de Visual Studio." -ForegroundColor Red
    exit 0
}

Write-Host "`n‚úÖ Visual Studio instalado(s):" -ForegroundColor Green

$instances | ForEach-Object {
    $instance = $_
    $products = $instance | Select-Object -ExpandProperty Products

    # Mapeo de IDs de producto a nombres legibles
    $productNameMap = @{
        "Microsoft.VisualStudio.Product.Enterprise"     = "Visual Studio Enterprise"
        "Microsoft.VisualStudio.Product.Professional"   = "Visual Studio Professional"
        "Microsoft.VisualStudio.Product.Community"      = "Visual Studio Community"
        "Microsoft.VisualStudio.Product.BuildTools"     = "Visual Studio Build Tools"
        "Microsoft.VisualStudio.Product.Workload"       = "Workload"
        "Microsoft.VisualStudio.Product.VisualStudio"   = "Visual Studio"
    }

    $friendlyProducts = $products | ForEach-Object {
        $matched = $productNameMap.GetEnumerator() | Where-Object { $_.Key -eq $_ } | Select-Object -ExpandProperty Value
        if ($matched) { $matched } else { "Component" }
    } | Where-Object { $_ -ne "Component" } | Get-Unique

    if ($friendlyProducts.Count -eq 0) { $friendlyProducts = "Unknown SKU" }

    [PSCustomObject]@{
        Version      = $instance.Version
        Channel      = $instance.ChannelId
        Edition      = ($friendlyProducts -join ", ")
        Path         = $instance.InstallationPath
        Update       = $instance.UpdateChannel
    }
} | Format-Table -AutoSize
